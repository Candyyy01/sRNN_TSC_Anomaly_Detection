clc;
clear;
addpath('../twostreamfusion/matconvnet/matlab');
addpath('../twostreamfusion/models');
run vl_setupnn

load_rgb_path = '/new_disk1/liuwen/datasets/iccv2017/avenue/training/frames';
load_optical_flow_path = '/new_disk1/liuwen/datasets/iccv2017/avenue/training/optical_flow';
save_path = '/new_disk1/liuwen/datasets/iccv2017/avenue/training/twostreamfusion_feature';
extrace_layer = 'pool5';
feature_dimension = 2048;
dataset = 'avenue';
phrase = 'train';
nstack = 10;
optical_flow_mean = 128;
clip_upper = 20;
clip_bottom = -20;
clip = true;

% load the pre-trained CNN
net_rgb = load('ucf101-img-resnet-50-split1.mat');
net_rgb = dagnn.DagNN.loadobj(net_rgb.net) ;
net_rgb.mode = 'test' ;
net_rgb.conserveMemory = false; % note: important

net_optical_flow = load('ucf101-img-resnet-50-split1.mat');
net_optical_flow = dagnn.DagNN.loadobj(net_optical_flow.net) ;
net_optical_flow.mode = 'test' ;
net_optical_flow.conserveMemory = false; % note: important

% preprocess rgb
dir_video = dir(load_rgb_path);
dir_video = dir_video(3:end);
for i = 1:length(dir_video)
    dir_image = dir(dir_video(i).name);
    dir_image = dir_image(3:end);
    num_frames = length(dir_image);
    % create hdf5
    h5create([save_path '/' dataset '_' phrase '_' dir_video(i).name '.hdf5'],'/rgb',[num_frames, dimension],'Datatype','single');
    h5create([save_path '/' dataset '_' phrase '_' dir_video(i).name '.hdf5'],'/length',1,'Datatype','int32');
    features = zeros(num_frames, feature_dimension);
    for j = 1:num_frames
        im = imread(dir_image(j).name);
        im_ = single(im) ;
        im_ = imresize(im_, net.meta.normalization.imageSize(1:2)) ;
        im_ = bsxfun(@minus, im_, net.meta.normalization.averageImage) ;
        net.eval({'input', im_}) ;
        feature = net.vars(net.getVarIndex(extrace_layer)).value;
        features(j, :) = feature(:);
        disp(['rgb : video ' i ' / ' num_frames ' : frame ' j ' / ' length(dir_video)]);
    end
    h5write([save_path '/' dataset '_' phrase '_' dir_video(i).name '.hdf5'],'/rgb',trainData);
    h5write([save_path '/' dataset '_' phrase '_' dir_video(i).name '.hdf5'],'/length',num_frames);
end

% preprocess optical flow
dir_video = dir(load_optical_flow_path);
dir_video = dir_video(3:end);
for i = 1:length(dir_video)
    optical_flow = h5read(dir_videoi}.name,'/optical_flow');
    s = size(optical_flow);
    num_frames = s(1) + 1;
    % create hdf5
    h5create([save_path '/' dataset '_' phrase '_' dir_video(i).name '.hdf5'],'/optical_flow',[num_frames, dimension],'Datatype','single');
    features = zeros(num_frames, feature_dimension);
    %normalize optical flow
    for j = 1:num_frames - 1
        for k = 1:2
            if clip
                optical_flow(:,:,k,j) = max(optical_flow(:,:,k,j), clip_bottom);
                optical_flow(:,:,k,j) = min(optical_flow(:,:,k,j), clip_upper);
            end
            min_value = min(optical_flow(:,:,k,j));
            max_value = max(optical_flow(:,:,k,j));
            optical_flow(:,:,k,j) = bsxfun(@minus, optical_flow(:,:,k,j), min_value);
            optical_flow(:,:,k,j) = bsxfun(@divide, optical_flow(:,:,k,j), max_value);
            optical_flow(:,:,k,j) = optical_flow(:,:,k,j) * 255;
        end
    end
    for j = 1:num_frames - nstack + 1
        im_ = optical_flow(:, :, :, j:j + nstack - 1);
        im_ = permute(im_, [2, 1, 3, 4]);
        s = size(im_);
        im_ = reshape(im_, [s(1), s(2), s(3) * s(4)]);
        im_ = imresize(im_, net.meta.normalization.imageSize(1:2)) ;
        im_ = bsxfun(@minus, im_, optical_flow_mean) ;
        net.eval({'input', im_}) ;
        feature = net.vars(net.getVarIndex(extrace_layer)).value;
        features(j, :) = feature(:);
        disp(['optical_flow : video ' i ' / ' num_frames ' : frame ' j ' / ' length(dir_video)]);
    end
    for j = num_frames - nstack + 2:num_frames
        features(j,:) = features(num_frames - nstack + 1,:);
    end
    
    h5write([save_path '/' dataset '_' phrase '_' dir_video(i).name '.hdf5'],'/optical_flow',trainData);
end